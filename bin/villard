#!/usr/bin/env python
import os
import sys
from argparse import ArgumentParser
from distutils.command.config import config

from pyrsistent import optional
from villard import V

USAGE = """villard <command> [<args>]

The following commands are available:
    run       Run a villard pipeline
"""

CONFIG_TEMPLATE = """

# This is where we list the modules that contain the implementations of the nodes.
# The modules must be importable. They can be placed in subdirectories. Remember
# to add __init__.py files to the subdirectories.
node_implementation_modules:
  - nodes

data_catalog:
  local_iris:
    path: 01_raw/iris.csv

pipeline_definition:
  preprocess_data:
    data: "data::local_iris"
""".strip()


class CMDTool:
    def __init__(self):
        if len(sys.argv) < 2:
            print(USAGE)
            exit(1)

        cmd = sys.argv[1]
        if cmd == "run":
            parser = ArgumentParser(usage=USAGE)
            parser.add_argument("config_path", help="Path to the config file")
            parser.add_argument(
                "-p",
                "--pipeline-name",
                help="Name of the pipeline to run",
                default="_default",
            )
            args = parser.parse_args(sys.argv[2:])

            config_file = args.config_path
            pipeline_name = args.pipeline_name

            self.run(config_file, pipeline_name)
        elif cmd == "create":
            parser = ArgumentParser(usage=USAGE)
            parser.add_argument("project_name", help="Name of the project to create")
            args = parser.parse_args(sys.argv[2:])

            project_name = args.project_name
            self.create(project_name)

    def run(self, config_file, pipeline_name):
        if pipeline_name == "_default":
            print(
                f"No pipeline name specified. Using default pipeline name: {pipeline_name}"
            )

        V.run(config_file, pipeline_name)

    def create(self, project_name):
        # create folder
        if not os.path.exists(project_name):
            os.makedirs(project_name)
        else:
            print(f"Directory with name {project_name} already exists.")
            sys.exit(1)

        # create an empty config file
        with open(f"{project_name}/config.yaml", "w") as f:
            f.write(CONFIG_TEMPLATE)


if __name__ == "__main__":
    CMDTool()
